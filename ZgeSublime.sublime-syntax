%YAML 1.2
---
name: ZGameEditor
file_extensions: [zgeproj]
scope: text.xml.zgeproj

variables:

  zgecode_tags: 'BeforeInitExp|Expression|TextExpression|Source|WhileExp'
  glsl_tags: 'FragmentShaderSource|GeometryShaderSource|VertexShaderSource'
  data_tags: 'BitmapFile|Icon|MeshData'
  storage_tags: 'byte|float|int|mat4|model|string|vec[234]|void|xptr'
  cdata_open: '(<!\[)(CDATA)(\[)'
  cdata_close: '((?://.*?)?)(\]\])(>)'


contexts:

  main:

    - match: '(<)({{zgecode_tags}})(>)'
      captures:
        1: punctuation.definition.tag.begin.xml
        2: entity.name.tag.zgecode.xml
        3: punctuation.definition.tag.begin.content.xml
      push: zgecode

    - match: '(<)({{glsl_tags}})(>)'
      captures:
        1: punctuation.definition.tag.begin.xml
        2: entity.name.tag.xml
        3: punctuation.definition.tag.begin.content.xml
      push: glsl

    - match: '(<)(Comment)(>)'
      captures:
        1: punctuation.definition.tag.begin.xml
        2: entity.name.tag.xml
        3: punctuation.definition.tag.begin.content.xml
      push: text

    - match: '(<)({{data_tags}})(>)'
      captures:
        1: punctuation.definition.tag.begin.xml
        2: entity.name.tag.xml
        3: punctuation.definition.tag.begin.content.xml
      push: data

    - match: '<\?xml|\?>'
      scope: punctuation.definition.tag.xml

    - include: scope:text.xml


  zgecode:
    
    - match: '{{cdata_open}}'
      captures:
        1: punctuation.definition.tag.begin.xml
        2: keyword.declaration.cdata.xml
        3: punctuation.definition.tag.begin.content.xml
      push: zgecode_content
    
    - match: '(</)({{zgecode_tags}})(>)'
      captures:
        1: punctuation.definition.tag.begin.xml
        2: entity.name.tag.xml
        3: punctuation.definition.tag.end.xml
      pop: true


  zgecode_content:

    - match: '{{cdata_close}}'
      captures:
        1: comment.line.double-slash.csharp  # Optional C# comment
        2: punctuation.definition.cdata.xml  # ]] part
        3: punctuation.definition.tag.xml    # > part
      pop: true

    # If/else control statements
    - match: '\b(if|else|while)\b'
      scope: keyword.control.conditional.csharp

    # Switch control statement
    - match: '\bswitch\b'
      scope: keyword.control.switch.csharp

    # Case label in switch statement
    - match: '\bcase\b'
      scope: keyword.control.case.csharp

    # Default label in switch statement
    - match: '\bdefault\b'
      scope: keyword.control.default.csharp

    # Break statement for flow control
    - match: '\bbreak\b'
      scope: keyword.control.break.csharp

    # Return statement for flow control
    - match: '\breturn\b'
      scope: keyword.control.flow.return.csharp

    # Single-line comments starting with //
    - match: '(//).*'
      captures:
        1: punctuation.definition.comment.csharp
      scope: comment.line.double-slash.csharp

    # Multi-line comments between /* and */
    - match: '/\*'
      push: multiline_comment
      scope: punctuation.definition.comment.csharp

    # Hexadecimal number literals
    - match: '\b0x[0-9a-fA-F]+\b'
      scope: constant.numeric.hex.csharp

    # Numeric literals (all types)
    - match: '\b\d+(\.\d+)?([ul]?[df]?f?)\b'
      scope: constant.numeric.csharp

    # Bitwise operators
    - match: '(&|\||\^|~|<<|>>)'
      scope: keyword.operator.bitwise.csharp

    # Storage modifiers for declarations
    - match: '\b(const|inline|override|private|virtual)\b'
      scope: storage.modifier

    # 'this' keyword reference
    - match: \bthis\b
      scope: variable.language.this.csharp

    # Class declaration statements
    - match: '\b(class)\s+(\w+)'
      captures:
        1: storage.modifier
        2: entity.name.type.class.csharp

    # Semicolon statement terminators
    - match: ';\s*$'
      scope: punctuation.terminator.statement.gray

    # Function/method declarations
    - match: '\b({{storage_tags}})\s+(\w+)\s*\('
      captures:
        1: storage.type                # Return type (purple)
        2: entity.name.function.csharp # Function name (green)
        3: meta.function.parameters    # Parameter list
      push: function_parameters

    # Function/method calls
    - match: '\b(?!(?:if|while|return|{{storage_tags}})\b)(\w+)(?=\s*\()'
      captures:
        1: support.function

    # Storage type references in expressions
    - match: '\b({{storage_tags}})\b'
      scope: storage.type

    # Comparison operators
    - match: '(==|!=|>=|<=|>|<)'
      scope: keyword.operator.comparison.csharp

    # Assignment and arithmetic operators
    - match: '(\+|-|\*|/|%|=|\+=|-=|\*=|/=|%=|\+\+|--|\?|:)'
      scope: keyword.operator.arithmetic.csharp

    # Logical operators
    - match: '(&&|\|\||!)'
      scope: keyword.operator.logical.csharp

    # String literals in double quotes
    - match: '".*?"'
      scope: string.quoted.double.csharp

    # Component Invocation calls
    - match: '@(AnimatorGroup|AnimatorSimple|AppState|Array|AudioMixer|Bitmap|BitmapBlur|BitmapCells|BitmapCombine|BitmapConvolution|BitmapDistort|BitmapExpression|BitmapFromFile|BitmapLoad|BitmapNoise|BitmapPixels|BitmapRect|BitmapZoom|CallComponent|Camera|Condition|Constant|DefineCollision|File|FileAction|FileMoveData|Font|Group|ImplicitCombine|ImplicitExpression|ImplicitPrimitive|ImplicitWarp|KeyPress|Light|Material|MaterialTexture|Mesh|MeshBox|MeshCombine|MeshExpression|MeshImplicit|MeshImport|MeshLoad|MeshLoop|MeshNoise|MeshSphere|MeshTransform|Model|ModelState|MouseModelController|Music|MusicControl|PlaySound|RefreshContent|RemoveAllModels|RemoveModel|RenderBeams|RenderMesh|RenderNet|RenderParticles|RenderSetColor|RenderSprite|RenderTarget|RenderText|RenderTile|RenderTransform|RenderTransformGroup|Repeat|Sample|SampleExpression|SampleImport|SetAppState|SetModelState|SetRenterTarget|Shader|ShaderVariable|Sound|SpawnModel|SpriteSheet|StartAnimator|SteeringBehavior|SteeringController|Thread|TileSet|Timer|UseMaterial|Variable|WebOpen|ZExpression|ZExternalLibrary|ZLibrary)(?=\()'
      scope: punctuation.definition.component  # @ symbol

    # Named component property
    - match: '\b(\w+)(?=\s*:)'
      scope: variable.parameter.named        # Property name (orange)


  multiline_comment:
    - match: '\*/'
      pop: true
      scope: punctuation.definition.comment.csharp
    - match: '[^\*]+|\*(?!/)'
      scope: comment.block.csharp


  function_parameters:
    - match: '\b({{storage_tags}})\s+(\w+)\b'
      captures:
        1: storage.type                 # Parameter type (purple)
        2: variable.parameter.csharp    # Parameter name (light orange)
    - match: '\)'
      pop: true


  glsl:

    - match: '{{cdata_open}}'
      captures:
        1: punctuation.definition.tag.begin.xml
        2: keyword.declaration.cdata.xml
        3: punctuation.definition.tag.begin.content.xml
      push: glsl_content
    
    - match: '(</)({{glsl_tags}})(>)'
      captures:
        1: punctuation.definition.tag.begin.xml
        2: entity.name.tag.xml
        3: punctuation.definition.tag.end.xml
      pop: true


  glsl_content:

    - match: '{{cdata_close}}'
      captures:
        1: comment.line.double-slash.csharp  # Optional C# comment
        2: punctuation.definition.cdata.xml  # ]] part
        3: punctuation.definition.tag.xml    # > part
      pop: true

    - include: scope:source.c


  text:
    
    - match: '{{cdata_open}}'
      captures:
        1: punctuation.definition.tag.begin.xml
        2: keyword.declaration.cdata.xml
        3: punctuation.definition.tag.begin.content.xml
      push: text_content
    
    - match: '(</)(Comment)(>)'
      captures:
        1: punctuation.definition.tag.begin.xml
        2: entity.name.tag.xml
        3: punctuation.definition.tag.end.xml
      pop: true


  text_content:

    - match: '{{cdata_close}}'
      captures:
        1: comment.line.double-slash.csharp  # Optional C# comment
        2: punctuation.definition.cdata.xml  # ]] part
        3: punctuation.definition.tag.xml    # > part
      pop: true

    - include: scope:source.txt


  data:

    - match: '{{cdata_open}}'
      captures:
        1: punctuation.definition.tag.begin.xml
        2: keyword.declaration.cdata.xml
        3: punctuation.definition.tag.begin.content.xml
      push: data_content
    
    - match: '(</)({{data_tags}})(>)'
      captures:
        1: punctuation.definition.tag.begin.xml
        2: entity.name.tag.xml
        3: punctuation.definition.tag.end.xml
      pop: true



  data_content:

    - meta_scope: comment.block.xml  # Makes everything gray

    - match: '{{cdata_close}}'
      captures:
        1: comment.line.double-slash.csharp  # Optional C# comment
        2: punctuation.definition.cdata.xml  # ]] part
        3: punctuation.definition.tag.xml    # > part
      pop: true
